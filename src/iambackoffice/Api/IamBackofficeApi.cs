/*
 * IamBackoffice Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using iambackoffice.Client;
using iambackoffice.Client.Auth;
using iambackoffice.Model;

namespace iambackoffice.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIamBackofficeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// AUTHZ
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeAssignRolesResponse</returns>
        IambackofficeAssignRolesResponse IamBackofficeAssignRoles(IambackofficeAssignRolesRequest body, int operationIndex = 0);

        /// <summary>
        /// AUTHZ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeAssignRolesResponse</returns>
        ApiResponse<IambackofficeAssignRolesResponse> IamBackofficeAssignRolesWithHttpInfo(IambackofficeAssignRolesRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object IamBackofficeAssignUserToGroup(IambackofficeAssignUserToGroupRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IamBackofficeAssignUserToGroupWithHttpInfo(IambackofficeAssignUserToGroupRequest body, int operationIndex = 0);
        /// <summary>
        /// GROUPS
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeCreateGroupResponse</returns>
        IambackofficeCreateGroupResponse IamBackofficeCreateGroup(IambackofficeCreateGroupRequest body, int operationIndex = 0);

        /// <summary>
        /// GROUPS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeCreateGroupResponse</returns>
        ApiResponse<IambackofficeCreateGroupResponse> IamBackofficeCreateGroupWithHttpInfo(IambackofficeCreateGroupRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeUserMfaResponse</returns>
        IambackofficeUserMfaResponse IamBackofficeDisableUserMfa(IambackofficeDisableUserMfaRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeUserMfaResponse</returns>
        ApiResponse<IambackofficeUserMfaResponse> IamBackofficeDisableUserMfaWithHttpInfo(IambackofficeDisableUserMfaRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeUserMfaResponse</returns>
        IambackofficeUserMfaResponse IamBackofficeEnableUserMfa(IambackofficeEnableUserMfaRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeUserMfaResponse</returns>
        ApiResponse<IambackofficeUserMfaResponse> IamBackofficeEnableUserMfaWithHttpInfo(IambackofficeEnableUserMfaRequest body, int operationIndex = 0);
        /// <summary>
        /// MFA
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeGenerateSecretForQRResponse</returns>
        IambackofficeGenerateSecretForQRResponse IamBackofficeGenerateSecretForQR(Object body, int operationIndex = 0);

        /// <summary>
        /// MFA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeGenerateSecretForQRResponse</returns>
        ApiResponse<IambackofficeGenerateSecretForQRResponse> IamBackofficeGenerateSecretForQRWithHttpInfo(Object body, int operationIndex = 0);
        /// <summary>
        /// USER
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeGetUserResponse</returns>
        IambackofficeGetUserResponse IamBackofficeGetUser(IambackofficeGetUserRequest body, int operationIndex = 0);

        /// <summary>
        /// USER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeGetUserResponse</returns>
        ApiResponse<IambackofficeGetUserResponse> IamBackofficeGetUserWithHttpInfo(IambackofficeGetUserRequest body, int operationIndex = 0);
        /// <summary>
        /// LOGIN
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeLoginResponse</returns>
        IambackofficeLoginResponse IamBackofficeLogin(IambackofficeLoginRequest body, int operationIndex = 0);

        /// <summary>
        /// LOGIN
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeLoginResponse</returns>
        ApiResponse<IambackofficeLoginResponse> IamBackofficeLoginWithHttpInfo(IambackofficeLoginRequest body, int operationIndex = 0);
        /// <summary>
        /// LOGIN MFA
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeLoginResponse</returns>
        IambackofficeLoginResponse IamBackofficeLoginMfa(IambackofficeLoginMfaRequest body, int operationIndex = 0);

        /// <summary>
        /// LOGIN MFA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeLoginResponse</returns>
        ApiResponse<IambackofficeLoginResponse> IamBackofficeLoginMfaWithHttpInfo(IambackofficeLoginMfaRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeLogoutResponse</returns>
        IambackofficeLogoutResponse IamBackofficeLogout(IambackofficeLogoutRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeLogoutResponse</returns>
        ApiResponse<IambackofficeLogoutResponse> IamBackofficeLogoutWithHttpInfo(IambackofficeLogoutRequest body, int operationIndex = 0);
        /// <summary>
        /// REGISTRATION
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeRegistrationResponse</returns>
        IambackofficeRegistrationResponse IamBackofficeRegister(IambackofficeRegistrationRequest body, int operationIndex = 0);

        /// <summary>
        /// REGISTRATION
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeRegistrationResponse</returns>
        ApiResponse<IambackofficeRegistrationResponse> IamBackofficeRegisterWithHttpInfo(IambackofficeRegistrationRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeSearchGroupsResponse</returns>
        IambackofficeSearchGroupsResponse IamBackofficeSearchGroups(IambackofficeSearchGroupsRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeSearchGroupsResponse</returns>
        ApiResponse<IambackofficeSearchGroupsResponse> IamBackofficeSearchGroupsWithHttpInfo(IambackofficeSearchGroupsRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeUnassignRolesResponse</returns>
        IambackofficeUnassignRolesResponse IamBackofficeUnassignRoles(IambackofficeUnassignRolesRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeUnassignRolesResponse</returns>
        ApiResponse<IambackofficeUnassignRolesResponse> IamBackofficeUnassignRolesWithHttpInfo(IambackofficeUnassignRolesRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIamBackofficeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// AUTHZ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeAssignRolesResponse</returns>
        System.Threading.Tasks.Task<IambackofficeAssignRolesResponse> IamBackofficeAssignRolesAsync(IambackofficeAssignRolesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// AUTHZ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeAssignRolesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeAssignRolesResponse>> IamBackofficeAssignRolesWithHttpInfoAsync(IambackofficeAssignRolesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IamBackofficeAssignUserToGroupAsync(IambackofficeAssignUserToGroupRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IamBackofficeAssignUserToGroupWithHttpInfoAsync(IambackofficeAssignUserToGroupRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GROUPS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeCreateGroupResponse</returns>
        System.Threading.Tasks.Task<IambackofficeCreateGroupResponse> IamBackofficeCreateGroupAsync(IambackofficeCreateGroupRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GROUPS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeCreateGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeCreateGroupResponse>> IamBackofficeCreateGroupWithHttpInfoAsync(IambackofficeCreateGroupRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeUserMfaResponse</returns>
        System.Threading.Tasks.Task<IambackofficeUserMfaResponse> IamBackofficeDisableUserMfaAsync(IambackofficeDisableUserMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeUserMfaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeUserMfaResponse>> IamBackofficeDisableUserMfaWithHttpInfoAsync(IambackofficeDisableUserMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeUserMfaResponse</returns>
        System.Threading.Tasks.Task<IambackofficeUserMfaResponse> IamBackofficeEnableUserMfaAsync(IambackofficeEnableUserMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeUserMfaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeUserMfaResponse>> IamBackofficeEnableUserMfaWithHttpInfoAsync(IambackofficeEnableUserMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// MFA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeGenerateSecretForQRResponse</returns>
        System.Threading.Tasks.Task<IambackofficeGenerateSecretForQRResponse> IamBackofficeGenerateSecretForQRAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// MFA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeGenerateSecretForQRResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeGenerateSecretForQRResponse>> IamBackofficeGenerateSecretForQRWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// USER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeGetUserResponse</returns>
        System.Threading.Tasks.Task<IambackofficeGetUserResponse> IamBackofficeGetUserAsync(IambackofficeGetUserRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// USER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeGetUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeGetUserResponse>> IamBackofficeGetUserWithHttpInfoAsync(IambackofficeGetUserRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// LOGIN
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeLoginResponse</returns>
        System.Threading.Tasks.Task<IambackofficeLoginResponse> IamBackofficeLoginAsync(IambackofficeLoginRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// LOGIN
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeLoginResponse>> IamBackofficeLoginWithHttpInfoAsync(IambackofficeLoginRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// LOGIN MFA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeLoginResponse</returns>
        System.Threading.Tasks.Task<IambackofficeLoginResponse> IamBackofficeLoginMfaAsync(IambackofficeLoginMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// LOGIN MFA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeLoginResponse>> IamBackofficeLoginMfaWithHttpInfoAsync(IambackofficeLoginMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeLogoutResponse</returns>
        System.Threading.Tasks.Task<IambackofficeLogoutResponse> IamBackofficeLogoutAsync(IambackofficeLogoutRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeLogoutResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeLogoutResponse>> IamBackofficeLogoutWithHttpInfoAsync(IambackofficeLogoutRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// REGISTRATION
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeRegistrationResponse</returns>
        System.Threading.Tasks.Task<IambackofficeRegistrationResponse> IamBackofficeRegisterAsync(IambackofficeRegistrationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// REGISTRATION
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeRegistrationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeRegistrationResponse>> IamBackofficeRegisterWithHttpInfoAsync(IambackofficeRegistrationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeSearchGroupsResponse</returns>
        System.Threading.Tasks.Task<IambackofficeSearchGroupsResponse> IamBackofficeSearchGroupsAsync(IambackofficeSearchGroupsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeSearchGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeSearchGroupsResponse>> IamBackofficeSearchGroupsWithHttpInfoAsync(IambackofficeSearchGroupsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeUnassignRolesResponse</returns>
        System.Threading.Tasks.Task<IambackofficeUnassignRolesResponse> IamBackofficeUnassignRolesAsync(IambackofficeUnassignRolesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeUnassignRolesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IambackofficeUnassignRolesResponse>> IamBackofficeUnassignRolesWithHttpInfoAsync(IambackofficeUnassignRolesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIamBackofficeApi : IIamBackofficeApiSync, IIamBackofficeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IamBackofficeApi : IIamBackofficeApi
    {
        private iambackoffice.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IamBackofficeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IamBackofficeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IamBackofficeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IamBackofficeApi(string basePath)
        {
            this.Configuration = iambackoffice.Client.Configuration.MergeConfigurations(
                iambackoffice.Client.GlobalConfiguration.Instance,
                new iambackoffice.Client.Configuration { BasePath = basePath }
            );
            this.Client = new iambackoffice.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new iambackoffice.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = iambackoffice.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IamBackofficeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IamBackofficeApi(iambackoffice.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = iambackoffice.Client.Configuration.MergeConfigurations(
                iambackoffice.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new iambackoffice.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new iambackoffice.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = iambackoffice.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IamBackofficeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IamBackofficeApi(iambackoffice.Client.ISynchronousClient client, iambackoffice.Client.IAsynchronousClient asyncClient, iambackoffice.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = iambackoffice.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public iambackoffice.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public iambackoffice.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public iambackoffice.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public iambackoffice.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// AUTHZ 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeAssignRolesResponse</returns>
        public IambackofficeAssignRolesResponse IamBackofficeAssignRoles(IambackofficeAssignRolesRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeAssignRolesResponse> localVarResponse = IamBackofficeAssignRolesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AUTHZ 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeAssignRolesResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeAssignRolesResponse> IamBackofficeAssignRolesWithHttpInfo(IambackofficeAssignRolesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeAssignRoles");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeAssignRoles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeAssignRolesResponse>("/iambackoffice.IamBackoffice/AssignRoles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeAssignRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// AUTHZ 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeAssignRolesResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeAssignRolesResponse> IamBackofficeAssignRolesAsync(IambackofficeAssignRolesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeAssignRolesResponse> localVarResponse = await IamBackofficeAssignRolesWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AUTHZ 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeAssignRolesResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeAssignRolesResponse>> IamBackofficeAssignRolesWithHttpInfoAsync(IambackofficeAssignRolesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeAssignRoles");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeAssignRoles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeAssignRolesResponse>("/iambackoffice.IamBackoffice/AssignRoles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeAssignRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object IamBackofficeAssignUserToGroup(IambackofficeAssignUserToGroupRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<Object> localVarResponse = IamBackofficeAssignUserToGroupWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public iambackoffice.Client.ApiResponse<Object> IamBackofficeAssignUserToGroupWithHttpInfo(IambackofficeAssignUserToGroupRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeAssignUserToGroup");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeAssignUserToGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/iambackoffice.IamBackoffice/AssignUserToGroup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeAssignUserToGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IamBackofficeAssignUserToGroupAsync(IambackofficeAssignUserToGroupRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<Object> localVarResponse = await IamBackofficeAssignUserToGroupWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<Object>> IamBackofficeAssignUserToGroupWithHttpInfoAsync(IambackofficeAssignUserToGroupRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeAssignUserToGroup");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeAssignUserToGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/iambackoffice.IamBackoffice/AssignUserToGroup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeAssignUserToGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GROUPS 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeCreateGroupResponse</returns>
        public IambackofficeCreateGroupResponse IamBackofficeCreateGroup(IambackofficeCreateGroupRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeCreateGroupResponse> localVarResponse = IamBackofficeCreateGroupWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GROUPS 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeCreateGroupResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeCreateGroupResponse> IamBackofficeCreateGroupWithHttpInfo(IambackofficeCreateGroupRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeCreateGroup");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeCreateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeCreateGroupResponse>("/iambackoffice.IamBackoffice/CreateGroup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeCreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GROUPS 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeCreateGroupResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeCreateGroupResponse> IamBackofficeCreateGroupAsync(IambackofficeCreateGroupRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeCreateGroupResponse> localVarResponse = await IamBackofficeCreateGroupWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GROUPS 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeCreateGroupResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeCreateGroupResponse>> IamBackofficeCreateGroupWithHttpInfoAsync(IambackofficeCreateGroupRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeCreateGroup");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeCreateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeCreateGroupResponse>("/iambackoffice.IamBackoffice/CreateGroup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeCreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeUserMfaResponse</returns>
        public IambackofficeUserMfaResponse IamBackofficeDisableUserMfa(IambackofficeDisableUserMfaRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeUserMfaResponse> localVarResponse = IamBackofficeDisableUserMfaWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeUserMfaResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeUserMfaResponse> IamBackofficeDisableUserMfaWithHttpInfo(IambackofficeDisableUserMfaRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeDisableUserMfa");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeDisableUserMfa";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeUserMfaResponse>("/iambackoffice.IamBackoffice/DisableUserMfa", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeDisableUserMfa", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeUserMfaResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeUserMfaResponse> IamBackofficeDisableUserMfaAsync(IambackofficeDisableUserMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeUserMfaResponse> localVarResponse = await IamBackofficeDisableUserMfaWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeUserMfaResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeUserMfaResponse>> IamBackofficeDisableUserMfaWithHttpInfoAsync(IambackofficeDisableUserMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeDisableUserMfa");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeDisableUserMfa";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeUserMfaResponse>("/iambackoffice.IamBackoffice/DisableUserMfa", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeDisableUserMfa", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeUserMfaResponse</returns>
        public IambackofficeUserMfaResponse IamBackofficeEnableUserMfa(IambackofficeEnableUserMfaRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeUserMfaResponse> localVarResponse = IamBackofficeEnableUserMfaWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeUserMfaResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeUserMfaResponse> IamBackofficeEnableUserMfaWithHttpInfo(IambackofficeEnableUserMfaRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeEnableUserMfa");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeEnableUserMfa";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeUserMfaResponse>("/iambackoffice.IamBackoffice/EnableUserMfa", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeEnableUserMfa", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeUserMfaResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeUserMfaResponse> IamBackofficeEnableUserMfaAsync(IambackofficeEnableUserMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeUserMfaResponse> localVarResponse = await IamBackofficeEnableUserMfaWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeUserMfaResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeUserMfaResponse>> IamBackofficeEnableUserMfaWithHttpInfoAsync(IambackofficeEnableUserMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeEnableUserMfa");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeEnableUserMfa";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeUserMfaResponse>("/iambackoffice.IamBackoffice/EnableUserMfa", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeEnableUserMfa", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// MFA 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeGenerateSecretForQRResponse</returns>
        public IambackofficeGenerateSecretForQRResponse IamBackofficeGenerateSecretForQR(Object body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeGenerateSecretForQRResponse> localVarResponse = IamBackofficeGenerateSecretForQRWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// MFA 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeGenerateSecretForQRResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeGenerateSecretForQRResponse> IamBackofficeGenerateSecretForQRWithHttpInfo(Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeGenerateSecretForQR");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeGenerateSecretForQR";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeGenerateSecretForQRResponse>("/iambackoffice.IamBackoffice/GenerateSecretForQR", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeGenerateSecretForQR", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// MFA 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeGenerateSecretForQRResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeGenerateSecretForQRResponse> IamBackofficeGenerateSecretForQRAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeGenerateSecretForQRResponse> localVarResponse = await IamBackofficeGenerateSecretForQRWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// MFA 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeGenerateSecretForQRResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeGenerateSecretForQRResponse>> IamBackofficeGenerateSecretForQRWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeGenerateSecretForQR");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeGenerateSecretForQR";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeGenerateSecretForQRResponse>("/iambackoffice.IamBackoffice/GenerateSecretForQR", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeGenerateSecretForQR", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// USER 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeGetUserResponse</returns>
        public IambackofficeGetUserResponse IamBackofficeGetUser(IambackofficeGetUserRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeGetUserResponse> localVarResponse = IamBackofficeGetUserWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// USER 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeGetUserResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeGetUserResponse> IamBackofficeGetUserWithHttpInfo(IambackofficeGetUserRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeGetUser");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeGetUser";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeGetUserResponse>("/iambackoffice.IamBackoffice/GetUser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeGetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// USER 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeGetUserResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeGetUserResponse> IamBackofficeGetUserAsync(IambackofficeGetUserRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeGetUserResponse> localVarResponse = await IamBackofficeGetUserWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// USER 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeGetUserResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeGetUserResponse>> IamBackofficeGetUserWithHttpInfoAsync(IambackofficeGetUserRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeGetUser");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeGetUser";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeGetUserResponse>("/iambackoffice.IamBackoffice/GetUser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeGetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LOGIN 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeLoginResponse</returns>
        public IambackofficeLoginResponse IamBackofficeLogin(IambackofficeLoginRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeLoginResponse> localVarResponse = IamBackofficeLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LOGIN 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeLoginResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeLoginResponse> IamBackofficeLoginWithHttpInfo(IambackofficeLoginRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeLogin");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeLogin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeLoginResponse>("/iambackoffice.IamBackoffice/Login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LOGIN 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeLoginResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeLoginResponse> IamBackofficeLoginAsync(IambackofficeLoginRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeLoginResponse> localVarResponse = await IamBackofficeLoginWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LOGIN 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeLoginResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeLoginResponse>> IamBackofficeLoginWithHttpInfoAsync(IambackofficeLoginRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeLogin");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeLogin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeLoginResponse>("/iambackoffice.IamBackoffice/Login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LOGIN MFA 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeLoginResponse</returns>
        public IambackofficeLoginResponse IamBackofficeLoginMfa(IambackofficeLoginMfaRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeLoginResponse> localVarResponse = IamBackofficeLoginMfaWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LOGIN MFA 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeLoginResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeLoginResponse> IamBackofficeLoginMfaWithHttpInfo(IambackofficeLoginMfaRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeLoginMfa");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeLoginMfa";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeLoginResponse>("/iambackoffice.IamBackoffice/LoginMfa", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeLoginMfa", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LOGIN MFA 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeLoginResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeLoginResponse> IamBackofficeLoginMfaAsync(IambackofficeLoginMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeLoginResponse> localVarResponse = await IamBackofficeLoginMfaWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LOGIN MFA 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeLoginResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeLoginResponse>> IamBackofficeLoginMfaWithHttpInfoAsync(IambackofficeLoginMfaRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeLoginMfa");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeLoginMfa";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeLoginResponse>("/iambackoffice.IamBackoffice/LoginMfa", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeLoginMfa", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeLogoutResponse</returns>
        public IambackofficeLogoutResponse IamBackofficeLogout(IambackofficeLogoutRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeLogoutResponse> localVarResponse = IamBackofficeLogoutWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeLogoutResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeLogoutResponse> IamBackofficeLogoutWithHttpInfo(IambackofficeLogoutRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeLogout");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeLogout";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeLogoutResponse>("/iambackoffice.IamBackoffice/Logout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeLogout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeLogoutResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeLogoutResponse> IamBackofficeLogoutAsync(IambackofficeLogoutRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeLogoutResponse> localVarResponse = await IamBackofficeLogoutWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeLogoutResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeLogoutResponse>> IamBackofficeLogoutWithHttpInfoAsync(IambackofficeLogoutRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeLogout");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeLogout";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeLogoutResponse>("/iambackoffice.IamBackoffice/Logout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeLogout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// REGISTRATION 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeRegistrationResponse</returns>
        public IambackofficeRegistrationResponse IamBackofficeRegister(IambackofficeRegistrationRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeRegistrationResponse> localVarResponse = IamBackofficeRegisterWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// REGISTRATION 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeRegistrationResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeRegistrationResponse> IamBackofficeRegisterWithHttpInfo(IambackofficeRegistrationRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeRegister");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeRegister";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeRegistrationResponse>("/iambackoffice.IamBackoffice/Register", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeRegister", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// REGISTRATION 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeRegistrationResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeRegistrationResponse> IamBackofficeRegisterAsync(IambackofficeRegistrationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeRegistrationResponse> localVarResponse = await IamBackofficeRegisterWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// REGISTRATION 
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeRegistrationResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeRegistrationResponse>> IamBackofficeRegisterWithHttpInfoAsync(IambackofficeRegistrationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeRegister");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeRegister";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeRegistrationResponse>("/iambackoffice.IamBackoffice/Register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeRegister", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeSearchGroupsResponse</returns>
        public IambackofficeSearchGroupsResponse IamBackofficeSearchGroups(IambackofficeSearchGroupsRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeSearchGroupsResponse> localVarResponse = IamBackofficeSearchGroupsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeSearchGroupsResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeSearchGroupsResponse> IamBackofficeSearchGroupsWithHttpInfo(IambackofficeSearchGroupsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeSearchGroups");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeSearchGroups";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeSearchGroupsResponse>("/iambackoffice.IamBackoffice/SearchGroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeSearchGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeSearchGroupsResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeSearchGroupsResponse> IamBackofficeSearchGroupsAsync(IambackofficeSearchGroupsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeSearchGroupsResponse> localVarResponse = await IamBackofficeSearchGroupsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeSearchGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeSearchGroupsResponse>> IamBackofficeSearchGroupsWithHttpInfoAsync(IambackofficeSearchGroupsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeSearchGroups");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeSearchGroups";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeSearchGroupsResponse>("/iambackoffice.IamBackoffice/SearchGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeSearchGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IambackofficeUnassignRolesResponse</returns>
        public IambackofficeUnassignRolesResponse IamBackofficeUnassignRoles(IambackofficeUnassignRolesRequest body, int operationIndex = 0)
        {
            iambackoffice.Client.ApiResponse<IambackofficeUnassignRolesResponse> localVarResponse = IamBackofficeUnassignRolesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IambackofficeUnassignRolesResponse</returns>
        public iambackoffice.Client.ApiResponse<IambackofficeUnassignRolesResponse> IamBackofficeUnassignRolesWithHttpInfo(IambackofficeUnassignRolesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeUnassignRoles");
            }

            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeUnassignRoles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IambackofficeUnassignRolesResponse>("/iambackoffice.IamBackoffice/UnassignRoles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeUnassignRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IambackofficeUnassignRolesResponse</returns>
        public async System.Threading.Tasks.Task<IambackofficeUnassignRolesResponse> IamBackofficeUnassignRolesAsync(IambackofficeUnassignRolesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            iambackoffice.Client.ApiResponse<IambackofficeUnassignRolesResponse> localVarResponse = await IamBackofficeUnassignRolesWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iambackoffice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IambackofficeUnassignRolesResponse)</returns>
        public async System.Threading.Tasks.Task<iambackoffice.Client.ApiResponse<IambackofficeUnassignRolesResponse>> IamBackofficeUnassignRolesWithHttpInfoAsync(IambackofficeUnassignRolesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new iambackoffice.Client.ApiException(400, "Missing required parameter 'body' when calling IamBackofficeApi->IamBackofficeUnassignRoles");
            }


            iambackoffice.Client.RequestOptions localVarRequestOptions = new iambackoffice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = iambackoffice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = iambackoffice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "IamBackofficeApi.IamBackofficeUnassignRoles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IambackofficeUnassignRolesResponse>("/iambackoffice.IamBackoffice/UnassignRoles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamBackofficeUnassignRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
