/*
 * IamBackoffice Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = iambackoffice.Client.OpenAPIDateConverter;

namespace iambackoffice.Model
{
    /// <summary>
    /// IambackofficeUserRegistration
    /// </summary>
    [DataContract(Name = "iambackofficeUserRegistration")]
    public partial class IambackofficeUserRegistration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IambackofficeUserRegistration" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="data">data.</param>
        /// <param name="preferredLanguages">preferredLanguages.</param>
        /// <param name="roles">roles.</param>
        /// <param name="timezone">timezone.</param>
        public IambackofficeUserRegistration(string tenantId = default(string), Dictionary<string, string> data = default(Dictionary<string, string>), List<string> preferredLanguages = default(List<string>), List<string> roles = default(List<string>), string timezone = default(string))
        {
            this.TenantId = tenantId;
            this.Data = data;
            this.PreferredLanguages = preferredLanguages;
            this.Roles = roles;
            this.Timezone = timezone;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public Dictionary<string, string> Data { get; set; }

        /// <summary>
        /// Gets or Sets PreferredLanguages
        /// </summary>
        [DataMember(Name = "preferredLanguages", EmitDefaultValue = false)]
        public List<string> PreferredLanguages { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name = "roles", EmitDefaultValue = false)]
        public List<string> Roles { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IambackofficeUserRegistration {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  PreferredLanguages: ").Append(PreferredLanguages).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
