/*
 * IamBackoffice Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = iambackoffice.Client.OpenAPIDateConverter;

namespace iambackoffice.Model
{
    /// <summary>
    /// IambackofficeLoginRequest
    /// </summary>
    [DataContract(Name = "iambackofficeLoginRequest")]
    public partial class IambackofficeLoginRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IambackofficeLoginRequest" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="loginId">loginId.</param>
        /// <param name="metaData">metaData.</param>
        /// <param name="noTokens">noTokens.</param>
        /// <param name="password">password.</param>
        /// <param name="twoFactorTrustId">twoFactorTrustId.</param>
        public IambackofficeLoginRequest(string tenantId = default(string), string ipAddress = default(string), string loginId = default(string), IambackofficeMetaData metaData = default(IambackofficeMetaData), bool noTokens = default(bool), string password = default(string), string twoFactorTrustId = default(string))
        {
            this.TenantId = tenantId;
            this.IpAddress = ipAddress;
            this.LoginId = loginId;
            this.MetaData = metaData;
            this.NoTokens = noTokens;
            this.Password = password;
            this.TwoFactorTrustId = twoFactorTrustId;
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name = "ipAddress", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets LoginId
        /// </summary>
        [DataMember(Name = "loginId", EmitDefaultValue = false)]
        public string LoginId { get; set; }

        /// <summary>
        /// Gets or Sets MetaData
        /// </summary>
        [DataMember(Name = "metaData", EmitDefaultValue = false)]
        public IambackofficeMetaData MetaData { get; set; }

        /// <summary>
        /// Gets or Sets NoTokens
        /// </summary>
        [DataMember(Name = "noTokens", EmitDefaultValue = true)]
        public bool NoTokens { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorTrustId
        /// </summary>
        [DataMember(Name = "twoFactorTrustId", EmitDefaultValue = false)]
        public string TwoFactorTrustId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IambackofficeLoginRequest {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("  NoTokens: ").Append(NoTokens).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  TwoFactorTrustId: ").Append(TwoFactorTrustId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
