/*
 * IamBackoffice Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = iambackoffice.Client.OpenAPIDateConverter;

namespace iambackoffice.Model
{
    /// <summary>
    /// IambackofficeRegistrationRequest
    /// </summary>
    [DataContract(Name = "iambackofficeRegistrationRequest")]
    public partial class IambackofficeRegistrationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IambackofficeRegistrationRequest" /> class.
        /// </summary>
        /// <param name="registration">registration.</param>
        /// <param name="sendSetPasswordEmail">sendSetPasswordEmail.</param>
        /// <param name="skipRegistrationVerification">skipRegistrationVerification.</param>
        /// <param name="skipVerification">skipVerification.</param>
        /// <param name="user">user.</param>
        /// <param name="tenantId">tenantId.</param>
        public IambackofficeRegistrationRequest(IambackofficeUserRegistration registration = default(IambackofficeUserRegistration), bool sendSetPasswordEmail = default(bool), bool skipRegistrationVerification = default(bool), bool skipVerification = default(bool), IambackofficeUser user = default(IambackofficeUser), string tenantId = default(string))
        {
            this.Registration = registration;
            this.SendSetPasswordEmail = sendSetPasswordEmail;
            this.SkipRegistrationVerification = skipRegistrationVerification;
            this.SkipVerification = skipVerification;
            this.User = user;
            this.TenantId = tenantId;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Registration
        /// </summary>
        [DataMember(Name = "registration", EmitDefaultValue = false)]
        public IambackofficeUserRegistration Registration { get; set; }

        /// <summary>
        /// Gets or Sets SendSetPasswordEmail
        /// </summary>
        [DataMember(Name = "sendSetPasswordEmail", EmitDefaultValue = true)]
        public bool SendSetPasswordEmail { get; set; }

        /// <summary>
        /// Gets or Sets SkipRegistrationVerification
        /// </summary>
        [DataMember(Name = "skipRegistrationVerification", EmitDefaultValue = true)]
        public bool SkipRegistrationVerification { get; set; }

        /// <summary>
        /// Gets or Sets SkipVerification
        /// </summary>
        [DataMember(Name = "skipVerification", EmitDefaultValue = true)]
        public bool SkipVerification { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public IambackofficeUser User { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IambackofficeRegistrationRequest {\n");
            sb.Append("  Registration: ").Append(Registration).Append("\n");
            sb.Append("  SendSetPasswordEmail: ").Append(SendSetPasswordEmail).Append("\n");
            sb.Append("  SkipRegistrationVerification: ").Append(SkipRegistrationVerification).Append("\n");
            sb.Append("  SkipVerification: ").Append(SkipVerification).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
